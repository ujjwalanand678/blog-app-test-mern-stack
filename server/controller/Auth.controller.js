import User from "../model/User.model.js";
import bcrypt from "bcryptjs";

export const userRegister = async (req, res, next) => {
  const { name, email, password, phone, profilePic } = req.body;
  try {
    //now we have to find if user is available/registered or not . for that we need somthing unique like email that cannot be same for the two users.
    //for that we will use mongoose method findOne() . It returns a response at the time we find the matching user/value and it will stop searching any further. unlike find() which will search the whole database and return all the matching results in an array.
    let user = await User.findOne({ email: email }); // first email is schema email and second is from req.body which we will get from postman/frontend.

    if (user) {
      return res.status(400).json({
        success: false,
        message:
          "User already registered, you cannot register again with same email.",
      });
    }

    //pasword encryption
    const salt = await bcrypt.genSalt(10); // generate a salt with 10 rounds . it mixes the password and makes it more complex
    const hashing = await bcrypt.hash(password, salt); // hash the password with the generated by salting.
    //hashing encrypts the password and makes it more secure.
    //now we will store this hashed password in the database instead of plain text password.
    //so that even if someone hacks the database, they cannot see the actual passwords.

    user = new User({ name, email, password: hashing, phone, profilePic });
    await user.save();
    return res
      .status(200)
      .json({ success: true, message: "User registered successfully" });
  } catch (error) {
    return res.status(500).json({ success: false, message: "Server error" });
  }
};

export const userLogin = async (req, res, next) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email: email });
    if (!user) {
      return res
        .status(400)
        .json({ success: false, message: "User not registered" });
    }
    const comparePassword = await bcrypt.compare(
      password,
      user.password
    ); // it will compare the plain text password with the hashed password and return true or false.
    if (!comparePassword) {
      return res
        .status(400)
        .json({ success: false, message: "Invalid password" });
    }
    return res
      .status(200)
      .json({ success: true, message: "User logged in successfully" });
  } catch (error) {
    return res.status(500).json({ success: false, message: "Server error" });
  }
};
